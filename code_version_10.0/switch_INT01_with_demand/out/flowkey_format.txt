{'flowkey_sz_lw': 6,
 'lookup_fields': ['ipv4.typeServiceDiffServ',
                   'arp.targetProtocolAddress',
                   'ipv4.destinationAddress',
                   'hopINT.int_instruction_bit'],
 'metadata_fields': [],
 'metadata_packed': OrderedDict(),
 'metadata_packed_width': 0,
 'tier_hdr_map': {'arp': {'packed': OrderedDict([('arp.targetProtocolAddress', 32)]),
                          'raw': OrderedDict([('arp.targetProtocolAddress', 1)]),
                          'subfield_map': {'arp.targetProtocolAddress': ('arp.targetProtocolAddress',
                                                                         0,
                                                                         32)},
                          'total_width': 32},
                  'bytepackage': {'packed': OrderedDict(),
                                  'raw': OrderedDict(),
                                  'subfield_map': {},
                                  'total_width': 0},
                  'countpackage': {'packed': OrderedDict(),
                                   'raw': OrderedDict(),
                                   'subfield_map': {},
                                   'total_width': 0},
                  'egressTimestamp': {'packed': OrderedDict(),
                                      'raw': OrderedDict(),
                                      'subfield_map': {},
                                      'total_width': 0},
                  'ethernet': {'packed': OrderedDict(),
                               'raw': OrderedDict(),
                               'subfield_map': {},
                               'total_width': 0},
                  'hopINT': {'packed': OrderedDict([('hopINT.int_instruction_bit', 8), ('__padding', 24)]),
                             'raw': OrderedDict([('hopINT.int_instruction_bit', 1)]),
                             'subfield_map': {'hopINT.int_instruction_bit': ('hopINT.int_instruction_bit',
                                                                             0,
                                                                             8)},
                             'total_width': 32},
                  'hop_latency': {'packed': OrderedDict(),
                                  'raw': OrderedDict(),
                                  'subfield_map': {},
                                  'total_width': 0},
                  'ingressTimestamp': {'packed': OrderedDict(),
                                       'raw': OrderedDict(),
                                       'subfield_map': {},
                                       'total_width': 0},
                  'int_ingress_egress_ports': {'packed': OrderedDict(),
                                               'raw': OrderedDict(),
                                               'subfield_map': {},
                                               'total_width': 0},
                  'ipv4': {'packed': OrderedDict([('ipv4.typeServiceDiffServ', 8), ('ipv4.destinationAddress', 32), ('__padding', 24)]),
                           'raw': OrderedDict([('ipv4.typeServiceDiffServ', 1), ('ipv4.destinationAddress', 1)]),
                           'subfield_map': {'ipv4.destinationAddress': ('ipv4.destinationAddress',
                                                                        0,
                                                                        32),
                                            'ipv4.typeServiceDiffServ': ('ipv4.typeServiceDiffServ',
                                                                         0,
                                                                         8)},
                           'total_width': 64},
                  'shimINT': {'packed': OrderedDict(),
                              'raw': OrderedDict(),
                              'subfield_map': {},
                              'total_width': 0},
                  'switch_id': {'packed': OrderedDict(),
                                'raw': OrderedDict(),
                                'subfield_map': {},
                                'total_width': 0},
                  'tailINT': {'packed': OrderedDict(),
                              'raw': OrderedDict(),
                              'subfield_map': {},
                              'total_width': 0},
                  'tcp': {'packed': OrderedDict(),
                          'raw': OrderedDict(),
                          'subfield_map': {},
                          'total_width': 0},
                  'udp': {'packed': OrderedDict(),
                          'raw': OrderedDict(),
                          'subfield_map': {},
                          'total_width': 0}},
 'tier_hdrs': OrderedDict([(0, OrderedDict([('ethernet', {'total_width': 0, 'raw': OrderedDict(), 'subfield_map': {}, 'packed': OrderedDict()})])), (1, OrderedDict([('arp', {'total_width': 32, 'raw': OrderedDict([('arp.targetProtocolAddress', 1)]), 'subfield_map': {'arp.targetProtocolAddress': ('arp.targetProtocolAddress', 0, 32)}, 'packed': OrderedDict([('arp.targetProtocolAddress', 32)])})])), (2, OrderedDict([('ipv4', {'total_width': 64, 'raw': OrderedDict([('ipv4.typeServiceDiffServ', 1), ('ipv4.destinationAddress', 1)]), 'subfield_map': {'ipv4.destinationAddress': ('ipv4.destinationAddress', 0, 32), 'ipv4.typeServiceDiffServ': ('ipv4.typeServiceDiffServ', 0, 8)}, 'packed': OrderedDict([('ipv4.typeServiceDiffServ', 8), ('ipv4.destinationAddress', 32), ('__padding', 24)])})])), (3, OrderedDict([('udp', {'total_width': 0, 'raw': OrderedDict(), 'subfield_map': {}, 'packed': OrderedDict()}), ('tcp', {'total_width': 0, 'raw': OrderedDict(), 'subfield_map': {}, 'packed': OrderedDict()})])), (4, OrderedDict([('shimINT', {'total_width': 0, 'raw': OrderedDict(), 'subfield_map': {}, 'packed': OrderedDict()})])), (5, OrderedDict([('hopINT', {'total_width': 32, 'raw': OrderedDict([('hopINT.int_instruction_bit', 1)]), 'subfield_map': {'hopINT.int_instruction_bit': ('hopINT.int_instruction_bit', 0, 8)}, 'packed': OrderedDict([('hopINT.int_instruction_bit', 8), ('__padding', 24)])})])), (6, OrderedDict([('switch_id', {'total_width': 0, 'raw': OrderedDict(), 'subfield_map': {}, 'packed': OrderedDict()})])), (7, OrderedDict([('int_ingress_egress_ports', {'total_width': 0, 'raw': OrderedDict(), 'subfield_map': {}, 'packed': OrderedDict()})])), (8, OrderedDict([('hop_latency', {'total_width': 0, 'raw': OrderedDict(), 'subfield_map': {}, 'packed': OrderedDict()})])), (9, OrderedDict([('ingressTimestamp', {'total_width': 0, 'raw': OrderedDict(), 'subfield_map': {}, 'packed': OrderedDict()})])), (10, OrderedDict([('egressTimestamp', {'total_width': 0, 'raw': OrderedDict(), 'subfield_map': {}, 'packed': OrderedDict()})])), (11, OrderedDict([('countpackage', {'total_width': 0, 'raw': OrderedDict(), 'subfield_map': {}, 'packed': OrderedDict()})])), (12, OrderedDict([('bytepackage', {'total_width': 0, 'raw': OrderedDict(), 'subfield_map': {}, 'packed': OrderedDict()})])), (13, OrderedDict([('tailINT', {'total_width': 0, 'raw': OrderedDict(), 'subfield_map': {}, 'packed': OrderedDict()})]))])}
